size(4). forbidden(4,3). must_reach(3,4).#maxint = 99999.even :- size(N), #int(X), N = X+X.:- not even.:- size(N), N < 4.row_col(X) :- #int(X), X >= 1, X <= N, size(N), even.cell(X,Y) :-row_col(X),row_col(Y).move(X1,Y1,X2,Y2) v not_mov(X1,Y1,X2,Y2):-  valid(X1,Y1,X2,Y2).valid(X1,Y1,X2,Y2) :- cell(X1,Y1), cell(X2,Y2), X1 = X2+2, Y1 = Y2+1.valid(X1,Y1,X2,Y2) :- cell(X1,Y1), cell(X2,Y2), X1 = X2+2, Y2 = Y1+1.valid(X1,Y1,X2,Y2) :- cell(X1,Y1), cell(X2,Y2), X2 = X1+2, Y1 = Y2+1.valid(X1,Y1,X2,Y2) :- cell(X1,Y1), cell(X2,Y2), X2 = X1+2, Y2 = Y1+1.valid(X1,Y1,X2,Y2) :- cell(X1,Y1), cell(X2,Y2), X1 = X2+1, Y1 = Y2+2.valid(X1,Y1,X2,Y2) :- cell(X1,Y1), cell(X2,Y2), X1 = X2+1, Y2 = Y1+2.valid(X1,Y1,X2,Y2) :- cell(X1,Y1), cell(X2,Y2), X2 = X1+1, Y1 = Y2+2.valid(X1,Y1,X2,Y2) :- cell(X1,Y1), cell(X2,Y2), X2 = X1+1, Y2 = Y1+2.:- cell(X,Y), size(N), not #count{X1,Y1 : move(X,Y,X1,Y1)} = 1.:- cell(X,Y), size(N), not #count{X1,Y1 : move(X1,Y1,X,Y)} = 1.:- forbidden(X,Y), reached(X,Y)." + ":- must_reach(X,Y), not reached(X,Y).reached(X,Y) :- move(1,1,X,Y).reached(X2,Y2) :- reached(X1,Y1), move(X1,Y1,X2,Y2).:~ cell(X,Y), not forbidden(X,Y), not reached(X,Y).coverage(95).cov(N) :- N <= #count{X,Y : reached(X,Y)} <= M, size(V), coverage(Z),M = V * V, N2 = M * Z, N = N2 /100.